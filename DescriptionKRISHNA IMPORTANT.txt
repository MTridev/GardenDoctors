Steps am going through to create this project

-------------------------
1)  

Created a route towards the login page (login.blade.php)

-------------------------

2)  

Created a wrapper called master.blade.php which would include headers and footers (we place this in the view folder)

-------------------------

3) 

we include the wrapper to the login.blade.php by using '@extends('pageName')'
we can also use part of that wrapper by using '@section('content')' and '@endsection' to end the section

we can use '@yield('content')' from the source page

-------------------------

4)

Added Bootstrap cdn and removed optional theme

bootstrap version 3.3.7 used in GardenDoctors project

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

<!-- Latest compiled and minified JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>


-------------------------

-------------------------

5) 

Installed phpmyadmin with sudo apt install phpmyadmin
Then install mysql-server with sudo apt install mysql-server

Mistaken setup down below
sudo mysql_secure_installation whereby the the password is set("password is : Password@@*98")

to create a mysql user do this
sudo​ mysql -u root
CREATE​ USER 'your_user' IDENTIFIED BY 'your_password';

in my case

CREATE USER 'db_user_krishna'@'localhost' IDENTIFIED BY 'pa**wORd98';
GRANT ALL PRIVILEGES ON * . * TO 'db_user_krishna'@'localhost';
FLUSH PRIVILEGES;


and close mysql 




6) Create a new database with the help of phpmyadmin, then go to GardenDoctors
    Project and go to .env file and set database DB_PASSWORD

    Deleted the original migration files

    then to make new migration file do this:
    php artisan make:migration create_users_table

    and inside the folder database -> migrations , u 
    will find the migration file with the name by the
    timestamp.  Here you can add define which fields
    you want to add by adding details to the schema part

For example

        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique;

and enjoy a migration of database by; php artisan migrate





-------------------------

7) 

create a Seeder called User_Seeder
php artisan make:seeder User_Seeder

then add         
        DB::table('users')->insert([
            'name' => 'moothoorTridev',
            'email' => 'mthr@gmail.com',
            'password' => Hash::make('12345')
        ]); 

        to the User_Seeder.php


then type the command: 

php artisan db:seed --class=User_Seeder
(the above command would send the inputed data such also

moothoorTridev , mthr@gmail.com ...etc into the Databse)

u can keep changing the User_Seeder 

        DB::table('users')->insert([
            'name' => 'jacob',
            'email' => 'jacob@gmail.com',
            'password' => Hash::make('12345')
        ]);

and then press the command:

php artisan db:seed --class=User_Seeder

-------------------------

8) 

to make a new controller called UserController, type this:

        php artisan make:controller UserController


-------------------------

9) 

created another controller to 
php artisan make:controller ProductController

we need to create a middleware so as the user cannot
login again after a successful login

we can create a middleware like this command:
php artisan make:middleware UserAuth

we would need to register this middleware to the kernel.php though
i added the session as well in the kernel.php

-------------------------

10)

product table migration and seeding

created the product table with this command
php artisan make:migration create_products_table


then created the seeder by:

php artisan make:seeder Product_Seeder


then seeded the database with this command:

php artisan db:seed --class --class=Product_Seeder

we can have entries of multiple products throught the Product_Seeder by using this type of structure below
        // entry of this data towards the database
        DB::table('products')->insert([
            [
                'name' => 'Long Garden Fork',
                'price' => '2000',
                'category' => 'fork',
                'gallery' => 'https://www.thegardenshop.ie/images/detailed/2/long-handled-garden-fork-a.jpg',
                'description' => 'Long Handled Garden fork',
            ],
            [
                'name' => 'Short Garden Fork',
                'price' => '700',
                'category' => 'fork',
                'gallery' => 'https://www.thegardenshop.ie/images/detailed/2/short-handled-garden-fork.jpg',
                'description' => 'Short Handled Garden fork',
            ],
        ]);


        and just seed this thang by:
        php artisan db:seed --class --class=Product_Seeder


-------------------------

11) Product Detail page


Created a route towards localhost/detail/{id}
name that function detail

Route::get("detail/{id}",[ProductController::class,'detail']);


then i set up its controller to fetch data from database
i did that by adding the function into the ProductCOntroller

    function detail($id)
    {
        return Product::find($id);
    }


then went to the view page of product.blade.php to add the
different links for each of the images and its details, which 
would help redirect the user to the detail/{id} page
after clicking on the carousel's images

I did that by adding the <a> tag inside the @foreach loop

        <a href="detail/{{$item['id']}}">
          <img class="carousel-img" src="{{$item['gallery']}}" alt="Chania">
          <div class="carousel-caption slider-text">
            <h3>{{$item['name']}}</h3>
            <p>{{$item['description']}}</p>
          </div>
        </a>


then i created a detail.blade.php and copied all footer and 
header 


-------------------------

12) Making search page to work


created a route inside web.php
Route::get("search",[ProductController::class,'search']);

then added the function search to the controller
    function search(Request $req)
    {

        return $data = Product::
        where('name', 'like', '%'.$req->input('searchInputBox'). '%')->get();
    }

went to the header.blade.php and configured the text input to
'searchInputBox' and the form action to '/search' page

<form action="/search" class="navbar-form navbar-left">
    <div class="form-group">
        <input type="text" name="searchInputBox"


-------------------------

13) Making cart Table

i created migration
php artisan make:migration create_cart_table


php artisan migrate


-------------------------

14) Putting product into cart table


opened the detail.blade.php and did these things
putting a post form to get the productIDInput
and making it safe by using @csrf

<form action="/addtocart" method="POST">
        <input type="hidden" name="productIDInput" value="{{$productDetail['id']}}">
        @csrf
        <button>
            <span class="glyphicon glyphicon-shopping-cart"></span>
        </button>
</form>



then i added these codes to the route

Route::post("addtocart",[ProductController::class,'additionToCart']);

then i created the controller with the additionToCart function


    function additionToCart(Request $req)
    {

        // if logged in via session with user return a hello
        // else redirect to homepage
        if($req->session()->has('user'))
        {
            return "hello";

        }
        else
        {
            return redirect('/login');

        }
    }


then to put up these data into the databse, we would need a 
model, hence to create a model type these commands

php artisan make:model Cart

both the table in the database, and the model is named: cart
hence we need to define the table manually by adding this to model:

model name is Cart.php
public $table="cart";


then i import it inside ProductCOntroller by:

use App\Models\Cart;

and added these lines to the ProductController

    function additionToCart(Request $req)
    {

        // if logged in via session with user return a hello
        // else redirect to homepage
        if($req->session()->has('user'))
        {
            // created a new object
            $cart = new Cart();

            $cart -> user_id = $req 
            -> session() 
            -> get('user')['id'];

            $cart -> product_id = $req
            -> productIDInput; 
            
            // productIDInput comes from the name in the form
            // and product_id comes from the cart table 

            $cart->save();

            return redirect('/');

        }
        else
        {
            return redirect('/login');

        }
    }


and now on adding add to cart to a product, the product goes to
the cart


-------------------------

15) completion of add to cart(display of number of items in cart)

created this function in ProductController

    static function cartItem()
    {
        $userId = Session::get('user')['id'];
        return Cart::where('user_id',$userId)->count();
    }

this function is the counting of the number of entries
in the Cart model with the user_id 

and to use it i imported

use Session;





then i added this text to the header.blade.php, to use
the session

<?php

use App\Http\Controllers\ProductController;;
$total = ProductController::cartItem();

?>

then used this $total to print to my header page(whenever 
am logged in ;) and display the cart total)


Cart({{$total}})


-------------------------

16) Login and Logout 


at this point, we cant access the login page if there is no session
(example in inconito mode).. an array error would be displayed

hence to remove this problem we do these Steps

in the header.blade.php, we set the total to 0 and count it if 
ever there is a session

$total = 0;


if (Session::has('user')) {
    $total = ProductController::cartItem();
}


then to display the login, or instead welcome username tabs, we use

@if(Session::has('user'))
@else
@endif

<ul class="nav navbar-nav navbar-right">
    @if(Session::has('user'))
    <li class="dropdown">
        <a class="dropdown-toggle" data-toggle="dropdown" href="#">Welcome {{Session::get('user')['name']}}
            <span class="caret"></span></a>
        <ul class="dropdown-menu">
            <li><a href="/logout">Logout</a></li>
            <li><a href="#">Page 1-2</a></li>
            <li><a href="#">Page 1-3</a></li>
        </ul>
    </li>
    @else
    <li><a href="/login">Login</a></li>
    @endif

    <li><a href="#">Cart({{$total}})</a></li>

</ul>


create a route in web.php to go to the logout and do the function

Route::get('/logout',function (){

    // Erasing session from browser with forget function with
    // key 'user'
    Session::forget('user');
    return redirect(('/login'));
});


-------------------------

17) listing of cart products

we created a redirection to the cart page bt


adding this code to the header.blade.php
<li><a href="/cartlisting">Cart({{$total}})</a></li>

then created route in web.php
Route::get("cartlisting",[ProductController::class,'cartListFunction']);

then create a view called as cartlisting.blade.php, in the view (it can be copied from search.blade.php)


then defined the function in the productCOntroller, And imported Facades

it is a wrapper around non static function as static function
meaning you can call non static function just as a static function
use Illuminate\Support\Facades\App\DB;

function cartListFunction()
{
    $userId = Session::get('user')['id'];
    $productList = DB::table('cart')
    ->join('products','cart.product_id','=','products.id')
    ->where('cart.user_id',$userId)
    ->select('products.*')
    ->get();

    return view('cartlisting',['products'=>$productList]);
}


then we need to convert the code in the cartlisting.blade.php from 

 @foreach ($products as $item)
                    <div class="searched-item">
                        <a href="detail/{{$item['id']}}">

                        to the different syntax

@foreach ($products as $item)
                    <div class="searched-item">
                        <a href="detail/{{$item->id}}">




-------------------------

18) remove listing of cart products

in the part i added <hr> tag to put a horizontal divider in the cart listing

i added the line , 'cart.id as cartIdSelect' 
so as to select the id of the cart and assign it a variable
called cartIdSelect, this cartIdSelect can then be used to 'get'
the cart's id

    function cartListFunction()
    {
        $userId = Session::get('user')['id'];
        $productList = DB::table('cart')
        ->join('products','cart.product_id','=','products.id')
        ->where('cart.user_id',$userId)
        ->select('products.*', 'cart.id as cartIdSelect')
        ->get();

        return view('cartlisting',['products'=>$productList]);
    }





then i added the href="/removefromCart/{{$item->cartIdSelect}}"

<div class="col-sm-4">
        <a href="/removefromCart/{{$item->cartIdSelect}}" class="btn btn-info btn-lg">
            <span class="glyphicon glyphicon-remove"></span> Remove from Cart
        </a>
</div>


then i added the route in web.php as 

Route::get("removefromCart/{id}",[ProductController::class,'removefromCartFunction']);

and defined the function in the ProductController, to destroy the
the cart id from the database and redirect to the cart list

The Cart Modal has been used in this function to destroy the id

function removefromCartFunction($id)
{
    Cart::destroy($id);
    return redirect('cartlisting');
}



-------------------------

19) Order Page creation


created a route from web.php

Route::get("checkoutPage",[ProductController::class,'checkoutFunction']);



then created by button to redirect to checkout

<div class="checkoutBtn">
    <a href="checkoutPage">
        <span class="glyphicon glyphicon-check" ></span> Proceed to checkout
    </a>
</div>

then defined the function checkoutFunction Here in the productCOntroller

function checkoutFunction()
{
    $userId = Session::get('user')['id'];
    $total = DB::table('cart')
    ->join('products','cart.product_id','=','products.id')
    ->where('cart.user_id',$userId)
    ->sum('products.price');

    return view('checkoutPage',['total'=>$total]);
}

THEN CREATED A VIEW page to the checkoutPage called checkoutPage.blade.php


-------------------------

19) Order table creation

creating migration table by

php artisan make:migration create_payment_table

then in that payment migration table i added the additional details
such as prdouct id, user_id and others

public function up()
{
    Schema::create('payment', function (Blueprint $table) {
        $table->id();
        $table->integer('product_id');
        $table->integer('user_id');
        $table->string('status');
        $table->string('payment_method');
        $table->string('payment_status');
        $table->string('address');
        $table->timestamps();
    });
}





-------------------------

20) Order feature part


created the action of the post to go toward completeCheckout

  <form action="/completeCheckout" method="POST">
  <div class="form-group">
    <input name="customerAddress" class="form-control" placeholder="Enter Delivery Address">
  </div>
  <div class="form-group">
    <label for="paymentMethodLbl">Payment Method:</label>
</br> 
    <input type="radio" name="payment" value="paypal"> <span>Paypal</span>
    <input type="radio" name="payment" value="cashOnHand"> <span>Cash on Delivery</span>

  </div>



then defined route to move to the page and its function, in web.php

Route::get("completeCheckout",[ProductController::class,'completeCheckoutFunction']);


then created a function called 'completeCheckoutFunction', 
for the function we need the modal for Order Table as per the database


we create it by

php artisan make:model Order

and disable the timestamp for this Order model by adding the line as we dont want to store this

   public $timestamps=false;


then i wrote the completeCheckoutFunction



    function completeCheckoutFunction(Request $req)
    {
        $userId = Session::get('user')['id'];
        $cartItems = Cart::where('user_id',$userId )->get();
        foreach($cartItems as $cart)
        {
            $orderModelInstance = new Order;
            $orderModelInstance -> product_id=$cart['product_id'];
            $orderModelInstance -> user_id=$cart['user_id'];
            $orderModelInstance -> status="pending";
            $orderModelInstance -> payment_method=$req->paymentMethod;
            $orderModelInstance -> payment_status="pending";
            $orderModelInstance -> address=$req->customerAddress;
            $orderModelInstance -> save();
            Cart::where('user_id',$userId )->delete();
        }
        $req->input();
        return redirect('/');
    }

-in this function
-we get the session id, 
-we store all the items of the cart inside of the $cartItems variable.  We use the userId to precisely choose that particular
-id inside of the cart for example only jacob.
-we store each data from the cart table, and save it inside the Order table, and then delete that entry from the cart table
-finally we redirect user jacob to the homepage

-------------------------

21) Show my orders list

IN ORDERS TABLE WE DONT HAVE NAME OF PRODUCT AND NAME OF PERSON

HENCE WE NEED TO ADD THESE DETAILS BY JOINING theme

FIRST i created a "/orderList" link tag for redirection

created route for the link above, and the orderListFunction
Route::get("orderList",[ProductController::class,'orderListFunction']);


defined the orderListFunction in product controller

function orderListFunction()
{
    $userId = Session::get('user')['id'];
    $orders = DB::table('orders')
    ->join('products','orders.product_id','=','products.id')
    ->where('orders.user_id',$userId)
    ->get();

    return view('orderList',['orders'=>$orders]);
                        // key and order of values

}


we needed to join the table so as to get the name of the product

then i created a view page called orderList.blade.php


changed the foreach loop to 

@foreach ($orders as $item)


removed the buttons of buy now, and remove from cart

added address, payment_method, payment_status via the foreach loop  

<h4>Address {{$item->address}}</h4>
<h4>Payment Status {{$item->payment_status}}</h4>
<h4>Paid by {{$item->payment_method}}</h4>



-------------------------

22) User Registration


made a link in the header to redirect toward user register

then created a route in the view , whereby the
path is /register and view name is registerView

Route::view('/register','registerView');

then created a view called registerView.blade.php and copied
content from login to this view as they look similar

here the form takes all the name email and password and 
the action is towards register (as per web.php)

<form action='register' method='POST'>
@csrf
    <div class="form-group">
        <label>User Name</label>
        <input type="text" name="name" class="form-control"  aria-describedby="emailHelp" placeholder="Enter User name">
    </div>
    <div class="form-group">
        <label>Email address</label>
        <input type="email" name="email" class="form-control"  aria-describedby="emailHelp" placeholder="Enter email">
    </div>
    <div class="form-group">
        <label>Password</label>
        <input type="password" name="password" class="form-control" placeholder="Password">
    </div>

    <button type="submit" class="btn btn-primary">Register now</button>
</form>


then added the route and the post method and the function
Route::post("/register",[UserController::class,'registerFunction']);

then defined the registerFunction in UserController

function registerFunction(Request $req)
{
    // return $req ->input();
    //making a new instance of user
    $user = new User();
    $user->name=$req->name;
    $user->email=$req->email;
    $user->password=Hash::make($req->password);
    $user->save();
    return redirect('/login');

}

this function creates a new instance of the user,
$user requires username, email and password to register, 
the$req-> comes from the form register
this request is saved into the database called user
and finally a redirection is done to view the login page And
login into the dashboard
