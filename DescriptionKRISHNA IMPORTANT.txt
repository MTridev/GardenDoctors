Steps am going through to create this project

-------------------------
1)  

Created a route towards the login page (login.blade.php)

-------------------------

2)  

Created a wrapper called master.blade.php which would include headers and footers (we place this in the view folder)

-------------------------

3) 

we include the wrapper to the login.blade.php by using '@extends('pageName')'
we can also use part of that wrapper by using '@section('content')' and '@endsection' to end the section

we can use '@yield('content')' from the source page

-------------------------

4)

Added Bootstrap cdn and removed optional theme

bootstrap version 3.3.7 used in GardenDoctors project

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

<!-- Latest compiled and minified JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>


-------------------------

-------------------------

5) 

Installed phpmyadmin with sudo apt install phpmyadmin
Then install mysql-server with sudo apt install mysql-server

Mistaken setup down below
sudo mysql_secure_installation whereby the the password is set("password is : Password@@*98")

to create a mysql user do this
sudo​ mysql -u root
CREATE​ USER 'your_user' IDENTIFIED BY 'your_password';

in my case

CREATE USER 'db_user_krishna'@'localhost' IDENTIFIED BY 'pa**wORd98';
GRANT ALL PRIVILEGES ON * . * TO 'db_user_krishna'@'localhost';
FLUSH PRIVILEGES;


and close mysql 




6) Create a new database with the help of phpmyadmin, then go to GardenDoctors
    Project and go to .env file and set database DB_PASSWORD

    Deleted the original migration files

    then to make new migration file do this:
    php artisan make:migration create_users_table

    and inside the folder database -> migrations , u 
    will find the migration file with the name by the
    timestamp.  Here you can add define which fields
    you want to add by adding details to the schema part

For example

        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique;

and enjoy a migration of database by; php artisan migrate





-------------------------

7) 

create a Seeder called User_Seeder
php artisan make:seeder User_Seeder

then add         
        DB::table('users')->insert([
            'name' => 'moothoorTridev',
            'email' => 'mthr@gmail.com',
            'password' => Hash::make('12345')
        ]); 

        to the User_Seeder.php


then type the command: 

php artisan db:seed --class=User_Seeder
(the above command would send the inputed data such also

moothoorTridev , mthr@gmail.com ...etc into the Databse)

u can keep changing the User_Seeder 

        DB::table('users')->insert([
            'name' => 'jacob',
            'email' => 'jacob@gmail.com',
            'password' => Hash::make('12345')
        ]);

and then press the command:

php artisan db:seed --class=User_Seeder

-------------------------

8) 

to make a new controller called UserController, type this:

        php artisan make:controller UserController


-------------------------

9) 

created another controller to 
php artisan make:controller ProductController

we need to create a middleware so as the user cannot
login again after a successful login

we can create a middleware like this command:
php artisan make:middleware UserAuth

we would need to register this middleware to the kernel.php though
i added the session as well in the kernel.php

-------------------------

10)

product table migration and seeding

created the product table with this command
php artisan make:migration create_products_table


then created the seeder by:

php artisan make:seeder Product_Seeder


then seeded the database with this command:

php artisan db:seed --class --class=Product_Seeder

we can have entries of multiple products throught the Product_Seeder by using this type of structure below
        // entry of this data towards the database
        DB::table('products')->insert([
            [
                'name' => 'Long Garden Fork',
                'price' => '2000',
                'category' => 'fork',
                'gallery' => 'https://www.thegardenshop.ie/images/detailed/2/long-handled-garden-fork-a.jpg',
                'description' => 'Long Handled Garden fork',
            ],
            [
                'name' => 'Short Garden Fork',
                'price' => '700',
                'category' => 'fork',
                'gallery' => 'https://www.thegardenshop.ie/images/detailed/2/short-handled-garden-fork.jpg',
                'description' => 'Short Handled Garden fork',
            ],
        ]);


        and just seed this thang by:
        php artisan db:seed --class --class=Product_Seeder


-------------------------

11) Product Detail page


Created a route towards localhost/detail/{id}
name that function detail

Route::get("detail/{id}",[ProductController::class,'detail']);


then i set up its controller to fetch data from database
i did that by adding the function into the ProductCOntroller

    function detail($id)
    {
        return Product::find($id);
    }


then went to the view page of product.blade.php to add the
different links for each of the images and its details, which 
would help redirect the user to the detail/{id} page
after clicking on the carousel's images

I did that by adding the <a> tag inside the @foreach loop

        <a href="detail/{{$item['id']}}">
          <img class="carousel-img" src="{{$item['gallery']}}" alt="Chania">
          <div class="carousel-caption slider-text">
            <h3>{{$item['name']}}</h3>
            <p>{{$item['description']}}</p>
          </div>
        </a>


then i created a detail.blade.php and copied all footer and 
header 


-------------------------

12) Making search page to work


created a route inside web.php
Route::get("search",[ProductController::class,'search']);

then added the function search to the controller
    function search(Request $req)
    {

        return $data = Product::
        where('name', 'like', '%'.$req->input('searchInputBox'). '%')->get();
    }

went to the header.blade.php and configured the text input to
'searchInputBox' and the form action to '/search' page

<form action="/search" class="navbar-form navbar-left">
    <div class="form-group">
        <input type="text" name="searchInputBox"


-------------------------

13) Making cart Table

i created migration
php artisan make:migration create_cart_table


php artisan migrate


-------------------------

14) Putting product into cart table


opened the detail.blade.php and did these things
putting a post form to get the productIDInput
and making it safe by using @csrf

<form action="/addtocart" method="POST">
        <input type="hidden" name="productIDInput" value="{{$productDetail['id']}}">
        @csrf
        <button>
            <span class="glyphicon glyphicon-shopping-cart"></span>
        </button>
</form>



then i added these codes to the route

Route::post("addtocart",[ProductController::class,'additionToCart']);

then i created the controller with the additionToCart function


    function additionToCart(Request $req)
    {

        // if logged in via session with user return a hello
        // else redirect to homepage
        if($req->session()->has('user'))
        {
            return "hello";

        }
        else
        {
            return redirect('/login');

        }
    }


then to put up these data into the databse, we would need a 
model, hence to create a model type these commands

php artisan make:model Cart

both the table in the database, and the model is named: cart
hence we need to define the table manually by adding this to model:

model name is Cart.php
public $table="cart";


then i import it inside ProductCOntroller by:

use App\Models\Cart;

and added these lines to the ProductController

    function additionToCart(Request $req)
    {

        // if logged in via session with user return a hello
        // else redirect to homepage
        if($req->session()->has('user'))
        {
            // created a new object
            $cart = new Cart();

            $cart -> user_id = $req 
            -> session() 
            -> get('user')['id'];

            $cart -> product_id = $req
            -> productIDInput; 
            
            // productIDInput comes from the name in the form
            // and product_id comes from the cart table 

            $cart->save();

            return redirect('/');

        }
        else
        {
            return redirect('/login');

        }
    }


and now on adding add to cart to a product, the product goes to
the cart